#!/usr/bin/env python3

import json
import locale
import sys
import reports
import os
import emails
#import requests

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"model": "", "sales": 0}
  yearly_sales = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    car_dict = item["car"]

    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if max_sales["sales"] < item["total_sales"]:
      None
      max_sales["sales"] = item["total_sales"]
      car_model_value = car_dict["car_model"]
      max_sales["model"] = car_model_value
      print("car_dict:",car_dict," car_model:", car_model_value)
    # TODO: also handle most popular car_year
    car_year_value = car_dict["car_year"]
    if car_year_value not in yearly_sales:
      yearly_sales[car_year_value] = item["total_sales"]
    else:
      yearly_sales[car_year_value] += item["total_sales"]

  yearly_max_sales = 0
  yearly_best_year = 0
  for key,value in yearly_sales.items():
    if value > yearly_max_sales:
      yearly_max_sales = value
      yearly_best_year = key

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(max_sales["model"],max_sales["sales"]),
    "The most popular year was {} with {} sales.".format(yearly_best_year,yearly_max_sales),
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([str(item["id"]), format_car(item["car"]), str(item["price"]), str(item["total_sales"])])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  pdf_file = "C:\Dhana\OneDrive - Conduent\Reading Materials\python\my_code\Automatically_Generate_a_PDF_and_send_it_by_Email\cars.pdf"
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report

  header = [cars_dict_to_table(data)[0]]
  print(header)
  table_data = header + sorted(cars_dict_to_table(data)[1:], key=lambda x: x[3])
  print(table_data)
  subject_text = summary[0] + "\n" + summary[1] + "\n" + summary[2]
  print(subject_text)
  reports.generate(pdf_file ,"Sales summary for last month",subject_text,table_data)

  # TODO: send the PDF report as an email attachment

  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = subject_text

  #message = emails.generate(sender, receiver, subject, body, pdf_file)
  #emails.send(message)




if __name__ == "__main__":
  main(sys.argv)
